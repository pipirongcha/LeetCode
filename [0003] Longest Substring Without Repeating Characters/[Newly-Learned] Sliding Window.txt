[슬라이딩 윈도우]

개념: '윈도우' 라는 특정 범위를 지정하여, 윈도우 내부 element의 value를 이용해 문제를 풀이하는 알고리즘

장점: 중복되는 연산을 배제하여 효율성 증대

쓰임: 고정적인 범위의 탐색 
      




<간단한 구현>
 e.g. 무작위 숫자 10개가 들어있는 리스트에서, 연속적인 숫자 4개의 합 중 최대값을 구하라.
	=> 처음 계산된 합에서 맨 앞 인덱스를 빼고, 마지막 인덱스를 더하여 계산 (=슬라이딩 윈도우)


class Solution:
    def sliding_window(self, nums):

        # 입력 리스트의 길이와 슬라이딩 윈도우 크기 설정
        nums_len = len(nums)
        limit_num = 4

        # 초기 윈도우 합 계산
        window = sum(nums[:limit_num])
        result = window

        # 슬라이딩 윈도우를 이동하며 최대값 갱신
        for i in range(limit_num, nums_len):
            window += nums[i] - nums[i - limit_num]
            result = max(result, window)

        return result

  

